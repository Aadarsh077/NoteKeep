{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aadarsh\\\\Desktop\\\\inotebook\\\\frontend\\\\src\\\\context\\\\notes\\\\NoteState.js\",\n  _s = $RefreshSig$();\nimport NoteContext from \"./NoteContext\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  const host = \"http://localhost:5000\";\n  const notesInitial = [];\n  const [notes, setNotes] = useState(notesInitial);\n\n  // Get all notes\n  const getNotes = async () => {\n    // API Call\n    const response = await fetch(`${host}/api/notes/fetchnotes`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': localStorage.storItem('token')\n      }\n    });\n    const json = await response.json();\n    console.log(json);\n    setNotes(json);\n  };\n\n  //Add a Note\n  const addNote = async (title, description, tag) => {\n    // API call\n    const response = await fetch(`${host}/api/notes/addnote`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const note = await response.json();\n    setNotes(notes.concat(note));\n  };\n  const deleteNote = async id => {\n    // API Call\n    const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': localStorage.storItem('token')\n      }\n    });\n    const json = response.json();\n    console.log(json);\n    console.log(\"Deleting the note with id\" + id);\n    const newNotes = notes.filter(note => {\n      return note._id !== id;\n    });\n    setNotes(newNotes);\n  };\n\n  // Edit a Note\n  const editNote = async (id, title, description, tag) => {\n    // API Call\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-token': localStorage.storItem('token')\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const json = await response.json();\n    console.log(json);\n    let newNotes = JSON.parse(JSON.stringify(notes));\n    // Login to edit in client\n    for (let index = 0; index < newNotes.length; index++) {\n      const element = newNotes[index];\n      if (element._id === id) {\n        newNotes[index].title = title;\n        newNotes[index].description = description;\n        newNotes[index].tag = tag;\n        break;\n      }\n    }\n    setNotes(newNotes);\n  };\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      setNotes,\n      addNote,\n      deleteNote,\n      getNotes,\n      editNote\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n};\n_s(NoteState, \"hccfwx9qLG83YV7VqgUOSPmOD6I=\");\n_c = NoteState;\nexport default NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["NoteContext","useState","jsxDEV","_jsxDEV","NoteState","props","_s","host","notesInitial","notes","setNotes","getNotes","response","fetch","method","headers","localStorage","storItem","json","console","log","addNote","title","description","tag","getItem","body","JSON","stringify","note","concat","deleteNote","id","newNotes","filter","_id","editNote","parse","index","length","element","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Aadarsh/Desktop/inotebook/frontend/src/context/notes/NoteState.js"],"sourcesContent":["import NoteContext from \"./NoteContext\";\r\nimport { useState } from \"react\";\r\n\r\nconst NoteState = (props)=>{\r\n    const host = \"http://localhost:5000\"\r\n    const notesInitial = []\r\n\r\n    const [notes, setNotes] = useState(notesInitial)\r\n\r\n    // Get all notes\r\n    const getNotes = async () => {\r\n      // API Call\r\n      const response = await fetch(`${host}/api/notes/fetchnotes`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'auth-token': localStorage.storItem('token')\r\n        }\r\n      });\r\n      const json = await response.json()\r\n      console.log(json)\r\n      setNotes(json)\r\n    }\r\n\r\n    //Add a Note\r\n    const addNote = async (title, description, tag)=>{\r\n      // API call\r\n      const response = await fetch(`${host}/api/notes/addnote`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'auth-token': localStorage.getItem('token')\r\n        },\r\n        body: JSON.stringify({title, description, tag})\r\n      });\r\n      \r\n      const note = await response.json();\r\n      setNotes(notes.concat(note))\r\n    }\r\n\r\n    const deleteNote = async (id)=>{\r\n      // API Call\r\n      const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'auth-token': localStorage.storItem('token')\r\n        }\r\n      })\r\n      const json = response.json();\r\n      console.log(json)\r\n\r\n      console.log(\"Deleting the note with id\" + id);\r\n      const newNotes = notes.filter((note)=>{return note._id!==id})\r\n      setNotes(newNotes);\r\n    }\r\n    \r\n    // Edit a Note\r\n    const editNote = async (id, title, description, tag) => {\r\n      // API Call\r\n      const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'auth-token': localStorage.storItem('token')\r\n        },\r\n        body: JSON.stringify({title, description, tag})\r\n      })\r\n      const json = await response.json();\r\n      console.log(json);\r\n\r\n      let newNotes = JSON.parse(JSON.stringify(notes))\r\n      // Login to edit in client\r\n      for (let index = 0; index < newNotes.length; index++) {\r\n        const element = newNotes[index];\r\n        if (element._id === id){\r\n          newNotes[index].title = title;\r\n          newNotes[index].description = description;\r\n          newNotes[index].tag = tag;\r\n          break;\r\n        }\r\n      }\r\n      setNotes(newNotes);\r\n    }\r\n\r\n\r\n    return (\r\n        <NoteContext.Provider value={{notes, setNotes, addNote, deleteNote, getNotes, editNote }}>\r\n            {props.children}\r\n        </NoteContext.Provider>\r\n    )\r\n}\r\n\r\nexport default NoteState;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}